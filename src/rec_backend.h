#ifndef CYCLUS_SRC_REC_BACKEND_H_
#define CYCLUS_SRC_REC_BACKEND_H_

#include <vector>

#include <boost/intrusive_ptr.hpp>

#include "datum.h"

namespace cyclus {

typedef std::vector<Datum*> DatumList;

/// An abstract base class for listeners (e.g. output databases) that want
/// to receive data generated by the simulation.
class RecBackend {
 public:
  /// Convenience class for using a stack variable to auto-destruct a Recbackend
  class Deleter {
   public:
    /// Add another backend b to be deleted when the Deleter is destructed.
    void Add(std::shared_ptr<RecBackend> b) {
      backs_.push_back(b);
    }

    /// Deletes all tracked backends.
    ~Deleter() { }

   private:
    std::vector<std::shared_ptr<RecBackend>> backs_;
  };

  virtual ~RecBackend() {}

  /// Used to pass a list of new/collected Datum objects
  virtual void Notify(DatumList data) = 0;

  /// Used to uniquely identify a backend - particularly if there are more
  /// than one in a simulation.
  virtual std::string Name() = 0;

  /// Flushes all buffered data in the backend to its final format/location.
  virtual void Flush() = 0;

  /// Closes the backend, if approriate.
  virtual void Close() = 0;
};

}  // namespace cyclus

#endif  // CYCLUS_SRC_REC_BACKEND_H_
